{"version":3,"sources":["SelectableDataTable.tsx","index.tsx"],"names":["tableRows","props","isHeader","table","headerRows","rows","startRow","endRow","range","map","rowIndex","tableRow","columns","columnIndex","getCell","content","toString","formatRows","row","zipObject","formatColumns","column","name","withStreamlitConnection","useEffect","Streamlit","setFrameHeight","useState","selection","setSelection","args","data","onSelectionChange","value","setComponentValue","showSelectAll","ReactDOM","render","document","getElementById"],"mappings":"0QA2BMA,EAAY,SAACC,GAAuC,IAChDC,EAAoBD,EAApBC,SAAUC,EAAUF,EAAVE,MACVC,EAAqBD,EAArBC,WAAYC,EAASF,EAATE,KACdC,EAAWJ,EAAW,EAAIE,EAC1BG,EAASL,EAAWE,EAAaC,EAEjCL,EAAYQ,gBAAMF,EAAUC,GAAQE,KAAI,SAAAC,GAAQ,OACpDC,EAAS,CAAED,WAAUP,aAGvB,OAAOH,GAcHW,EAAW,SAACV,GAAoC,IAC5CS,EAAoBT,EAApBS,SAAUP,EAAUF,EAAVE,MACVS,EAAYT,EAAZS,QAOR,OALcJ,gBAAM,EAAGI,GAASH,KAAI,SAAAI,GAElC,OADoBV,EAAMW,QAAQJ,EAAUG,GAApCE,QACOC,eAMbC,EAAa,SAACZ,EAAkBO,GAAnB,OACjBP,EAAKI,KAAI,SAAAS,GAAG,OAAIC,oBAAUP,EAAQ,GAAIM,OAElCE,EAAgB,SAACR,GAAD,OACpBA,EAAQ,GAAGH,KAAI,SAAAY,GAAM,MAAK,CAAEC,KAAMD,OA8BrBE,eA5BuC,SAAAtB,GACpDuB,qBAAU,WACRC,IAAUC,eAAe,QAG3B,IAL6D,EAU3BC,mBAAsB,IAVK,mBAUtDC,EAVsD,KAU3CC,EAV2C,KAWvDjB,EAAUZ,EAAU,CAAEE,UAAU,EAAMC,MAAOF,EAAM6B,KAAKC,OACxD1B,EAAOL,EAAU,CAAEE,UAAU,EAAOC,MAAOF,EAAM6B,KAAKC,OAE5D,OACE,kBAAC,IAAD,CAAM1B,KAAMY,EAAWZ,EAAMO,GAAUA,QAASQ,EAAcR,IAC5D,kBAAC,IAAD,CACEgB,UAAWA,EACXI,kBAbwB,SAACC,GAC7BJ,EAAaI,GACbR,IAAUS,kBAAkBD,MAa1B,kBAAC,IAAD,MACA,kBAAC,IAAD,MACA,kBAAC,IAAD,MACA,kBAAC,IAAD,CAAgBE,eAAa,QCxFnCC,IAASC,OAAO,kBAAC,EAAD,MAAyBC,SAASC,eAAe,W","file":"static/js/main.99a0b95b.chunk.js","sourcesContent":["import React, { useState, useEffect, ReactText } from \"react\"\r\nimport { range, zipObject } from \"lodash\"\r\nimport { SelectionState, IntegratedSelection } from \"@devexpress/dx-react-grid\"\r\nimport {\r\n  Grid,\r\n  VirtualTable,\r\n  TableHeaderRow,\r\n  TableSelection,\r\n} from \"@devexpress/dx-react-grid-material-ui\"\r\nimport {\r\n  ArrowTable,\r\n  ComponentProps,\r\n  Streamlit,\r\n  withStreamlitConnection,\r\n} from \"streamlit-component-lib\"\r\n\r\ninterface TableRowsProps {\r\n  isHeader: boolean\r\n  table: ArrowTable\r\n}\r\n\r\n/**\r\n * Function returning a list of rows.\r\n *\r\n * isHeader     - Whether to display the header.\r\n * table        - The table to display.\r\n */\r\nconst tableRows = (props: TableRowsProps): string[][] => {\r\n  const { isHeader, table } = props\r\n  const { headerRows, rows } = table\r\n  const startRow = isHeader ? 0 : headerRows\r\n  const endRow = isHeader ? headerRows : rows\r\n\r\n  const tableRows = range(startRow, endRow).map(rowIndex =>\r\n    tableRow({ rowIndex, table })\r\n  )\r\n\r\n  return tableRows\r\n}\r\n\r\ninterface TableRowProps {\r\n  rowIndex: number\r\n  table: ArrowTable\r\n}\r\n\r\n/**\r\n * Function returning a list entries for a row.\r\n *\r\n * rowIndex - The row index.\r\n * table    - The table to display.\r\n */\r\nconst tableRow = (props: TableRowProps): string[] => {\r\n  const { rowIndex, table } = props\r\n  const { columns } = table\r\n\r\n  const cells = range(0, columns).map(columnIndex => {\r\n    const { content } = table.getCell(rowIndex, columnIndex)\r\n    return content.toString()\r\n  })\r\n\r\n  return cells\r\n}\r\n\r\nconst formatRows = (rows: string[][], columns: string[][]) =>\r\n  rows.map(row => zipObject(columns[0], row))\r\n\r\nconst formatColumns = (columns: string[][]) =>\r\n  columns[0].map(column => ({ name: column }))\r\n\r\nconst SelectableDataTable: React.FC<ComponentProps> = props => {\r\n  useEffect(() => {\r\n    Streamlit.setFrameHeight(350)\r\n  })\r\n\r\n  const handleSelectionChange = (value: ReactText[]): void => {\r\n    setSelection(value)\r\n    Streamlit.setComponentValue(value)\r\n  }\r\n\r\n  const [selection, setSelection] = useState<ReactText[]>([])\r\n  const columns = tableRows({ isHeader: true, table: props.args.data })\r\n  const rows = tableRows({ isHeader: false, table: props.args.data })\r\n\r\n  return (\r\n    <Grid rows={formatRows(rows, columns)} columns={formatColumns(columns)}>\r\n      <SelectionState\r\n        selection={selection}\r\n        onSelectionChange={handleSelectionChange}\r\n      />\r\n      <IntegratedSelection />\r\n      <VirtualTable />\r\n      <TableHeaderRow />\r\n      <TableSelection showSelectAll />\r\n    </Grid>\r\n  )\r\n}\r\n\r\nexport default withStreamlitConnection(SelectableDataTable)\r\n","import React from \"react\"\r\nimport ReactDOM from \"react-dom\"\r\nimport SelectableDataTable from \"./SelectableDataTable\"\r\n\r\nReactDOM.render(<SelectableDataTable />, document.getElementById(\"root\"))\r\n"],"sourceRoot":""}